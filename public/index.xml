<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eyeson JS Library on eyeson JavaScript Library</title>
    <link>https://eyeson-team.github.io/js-docs/</link>
    <description>Recent content in eyeson JS Library on eyeson JavaScript Library</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Aug 2017 15:55:33 +0200</lastBuildDate><atom:link href="https://eyeson-team.github.io/js-docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Screen Capture</title>
      <link>https://eyeson-team.github.io/js-docs/screen-capture/</link>
      <pubDate>Tue, 29 Aug 2017 15:45:12 +0200</pubDate>
      
      <guid>https://eyeson-team.github.io/js-docs/screen-capture/</guid>
      <description>Screen Capture Browser Extension In order to provide screen capturing you have to build a browser extension for Google Chrome.
 Use eyeson extension. Build your own extension, checkout this blog post.  Note: Mozilla Firefox supports screen capturing without building using a browser extension.
Screen Capture Events request_screen receive_screen end_screen ext_error Browser extension is not accessible.
{ }  Screen Capture Session Wrapper and helpers to ease handling of screen capture sessions.</description>
    </item>
    
    <item>
      <title>Utilities</title>
      <link>https://eyeson-team.github.io/js-docs/utilities/</link>
      <pubDate>Tue, 08 Aug 2017 12:18:31 +0200</pubDate>
      
      <guid>https://eyeson-team.github.io/js-docs/utilities/</guid>
      <description>Use eyeson js library additional helpers and utilities to minimize the work needed to setup your own video conferencing interface.
Logger Collect and manage development, debug, and error messages in one place.
eyeson.Logger.error(msg); // output error eyeson.Logger.warn(msg); // output warning eyeson.Logger.log(msg); // output log eyeson.Logger.debug(msg); // output debug  Device Manager Manage audio and video device settings like a boss.
const deviceManager = new eyeson.DeviceManager(); deviceManager.onChange(function(event) { // changeHandler event.error; // if set it contains { name, message }, default null event.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://eyeson-team.github.io/js-docs/overview/</link>
      <pubDate>Fri, 04 Aug 2017 16:32:40 +0200</pubDate>
      
      <guid>https://eyeson-team.github.io/js-docs/overview/</guid>
      <description>The library is globally available via eyeson and lets you connect to any eyeson room.
Public Interface Two of the most common things you want to do with the library are:
 Let a user join a room Respond to things happening inside the room  In order to receive eyeson room events register a listener using the onEvent method provided. Remember to register a handler before starting a room otherwise you might miss some initial events.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://eyeson-team.github.io/js-docs/events/</link>
      <pubDate>Fri, 04 Aug 2017 16:29:43 +0200</pubDate>
      
      <guid>https://eyeson-team.github.io/js-docs/events/</guid>
      <description>Events are the core data construct provided by the eyeson library. Most interactions with the room will be processed through events. The identifying attribute of an event is its type. When listening for events the most common thing you want to do is to respond to an event, commonly distinguished by conditionals, a switch statement or a factory.
Note
eyeson js library will handle some additional events for you in order to provide a higher level abstraction and for ease of use you will not receive those events.</description>
    </item>
    
  </channel>
</rss>
